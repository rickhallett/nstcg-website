# Product Requirements Document: StarLinkMini

## 1. Overview

StarLinkMini is a lightweight, single-script tool for tracking Starlink internet connection performance. It runs automated speed tests at regular intervals using `speedtest-cli` and stores results in both CSV and JSON formats. The tool is designed for immediate deployment and personal use, with minimal configuration required.

## 2. Goals

* Provide a simple, immediately usable tool for monitoring Starlink connection quality
* Create persistent logs of connection performance over time
* Support directional and tilt data for analyzing connection quality based on dish orientation
* Enable easy data analysis through standardized CSV and JSON outputs
* Maintain a minimal footprint with no external dependencies beyond speedtest-cli

## 3. Features

### 3.1 Core Functionality

* **Automated Testing**: Run speed tests every 10 minutes by default
* **Data Collection**: Capture download speed, upload speed, ping latency, and timestamp
* **Dual Output Format**: Store results in both CSV and JSON formats
* **Named Sessions**: Use `--name` parameter to create uniquely named output files
* **Directional Tracking**: Record dish direction using `--direction` parameter
* **Tilt Recording**: Track dish tilt angle using `--tilt` parameter

### 3.2 Command Line Interface

```bash
# Basic usage
./starlink-mini.sh --name session1

# With direction (compass points)
./starlink-mini.sh --name outdoor-test --direction NW

# With precise direction (degrees)
./starlink-mini.sh --name outdoor-test --direction 315.5

# With tilt angle
./starlink-mini.sh --name outdoor-test --direction NW --tilt 45

# Full example
./starlink-mini.sh --name winter-test --direction NNW --tilt 30
```

### 3.3 Direction Parameter Specification

* **Compass Points**: Single letter (N, S, E, W) up to 3 letters (NNW, ESE, etc.)
* **Numeric Degrees**: Float value 0-359.9 representing degrees from North
* **Validation**: Invalid compass combinations rejected, degrees wrapped modulo 360

### 3.4 Output File Formats

#### CSV Format (`<name>.csv`):
```csv
timestamp,download_mbps,upload_mbps,ping_ms,server_name,server_location,direction,tilt
2024-01-15T10:30:00Z,150.25,20.13,28.5,"Starlink Server","Seattle, WA",NW,45
2024-01-15T10:40:00Z,148.92,19.87,29.1,"Starlink Server","Seattle, WA",NW,45
```

#### JSON Format (`<name>.json`):
```json
[
  {
    "timestamp": "2024-01-15T10:30:00Z",
    "download": {
      "bandwidth": 157286400,
      "bytes": 242844672,
      "elapsed": 15004,
      "mbps": 150.25
    },
    "upload": {
      "bandwidth": 21096448,
      "bytes": 32505856,
      "elapsed": 15001,
      "mbps": 20.13
    },
    "ping": {
      "jitter": 2.145,
      "latency": 28.5
    },
    "server": {
      "name": "Starlink Server",
      "location": "Seattle, WA",
      "country": "United States",
      "host": "speedtest.starlink.com",
      "id": "12345"
    },
    "result": {
      "url": "https://www.speedtest.net/result/12345678"
    },
    "direction": "NW",
    "direction_degrees": 315,
    "tilt": 45
  }
]
```

## 4. Technical Requirements

### 4.1 Dependencies

* **speedtest-cli**: Must be installed and accessible in PATH
* **Bash**: Script requires Bash 4.0 or higher
* **Standard Unix tools**: jq (for JSON parsing), cron (for scheduling)

### 4.2 Implementation Details

* **Single Script**: All functionality contained in `starlink-mini.sh`
* **Error Handling**: Graceful handling of network failures, tool unavailability
* **Logging**: Optional verbose logging to stderr
* **Background Mode**: Support for daemonized operation
* **Signal Handling**: Clean shutdown on SIGTERM/SIGINT

### 4.3 Performance Requirements

* **Memory Usage**: Less than 50MB resident memory
* **CPU Usage**: Minimal, spike only during test execution
* **Storage**: Approximately 1KB per test result

## 5. Test Suite Requirements

The test suite should verify:

### 5.1 Core Functionality Tests
* Script executes without errors
* Speed test runs successfully
* Results are captured correctly
* Files are created with correct names

### 5.2 Parameter Validation Tests
* `--name` parameter creates correctly named files
* `--direction` accepts valid compass points (N, NE, NNE, etc.)
* `--direction` accepts numeric degrees (0-359.9)
* `--direction` rejects invalid inputs
* `--tilt` accepts valid integer degrees
* `--tilt` rejects out-of-range values

### 5.3 Output Format Tests
* CSV file has correct headers
* CSV data is properly formatted
* JSON file is valid JSON
* JSON structure matches specification
* Timestamps are in ISO 8601 format

### 5.4 Error Handling Tests
* Handles missing speedtest-cli gracefully
* Handles network failures appropriately
* Recovers from interrupted tests
* Logs errors appropriately

### 5.5 Integration Tests
* Continuous operation for multiple cycles
* File append operations work correctly
* No data loss during long runs
* Proper cleanup on termination

## 6. Usage Examples

### Basic Monitoring
```bash
# Start monitoring with default settings
./starlink-mini.sh --name home-monitor

# Check results
tail -f home-monitor.csv
```

### Directional Analysis
```bash
# Test different orientations
./starlink-mini.sh --name north-test --direction N --tilt 30
./starlink-mini.sh --name west-test --direction W --tilt 45

# Compare results
grep "^2024-01-15" north-test.csv west-test.csv
```

### Long-term Monitoring
```bash
# Add to crontab for continuous monitoring
*/10 * * * * /path/to/starlink-mini.sh --name continuous --direction 320 --tilt 40
```

## 7. Future Enhancements (Out of Scope for v1)

* Web dashboard for real-time visualization
* Automated analysis and alerting
* Multi-location comparison tools
* Integration with Starlink API
* Mobile app companion

## 8. Success Criteria

* Tool can be deployed and producing data within 5 minutes
* No external dependencies beyond speedtest-cli and standard Unix tools
* Data format is immediately compatible with common analysis tools (Excel, Pandas, etc.)
* Stable operation for weeks without intervention
* Clear error messages guide users to solutions